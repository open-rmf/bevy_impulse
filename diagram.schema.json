{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Diagram",
  "type": "object",
  "required": [
    "ops"
  ],
  "properties": {
    "ops": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/DiagramOperation"
      }
    }
  },
  "definitions": {
    "DiagramOperation": {
      "oneOf": [
        {
          "description": "Signifies the start of a workflow. There must be exactly 1 start operation in a diagram.",
          "type": "object",
          "required": [
            "next",
            "type"
          ],
          "properties": {
            "next": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "start"
              ]
            }
          }
        },
        {
          "description": "Signifies the end of a workflow. There must be exactly 1 terminate operation in a diagram.",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "terminate"
              ]
            }
          }
        },
        {
          "description": "Connect the request to a registered node.\n\n``` # bevy_impulse::Diagram::from_json_str(r#\" { \"ops\": { \"start\": { \"type\": \"start\", \"next\": \"nodeOp\" }, \"nodeOp\": { \"type\": \"node\", \"builder\": \"myNode\", \"next\": \"terminate\" }, \"terminate\": { \"type\": \"terminate\" } } } # \"#)?; # Ok::<_, serde_json::Error>(())",
          "type": "object",
          "required": [
            "builder",
            "next",
            "type"
          ],
          "properties": {
            "builder": {
              "type": "string"
            },
            "config": {
              "default": null
            },
            "next": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "node"
              ]
            }
          }
        },
        {
          "description": "If the request is cloneable, clone it into multiple responses.\n\n# Examples ``` # bevy_impulse::Diagram::from_json_str(r#\" { \"ops\": { \"start\": { \"type\": \"start\", \"next\": \"fork_clone\" }, \"fork_clone\": { \"type\": \"fork_clone\", \"next\": [\"terminate\"] }, \"terminate\": { \"type\": \"terminate\" } } } # \"#)?; # Ok::<_, serde_json::Error>(())",
          "type": "object",
          "required": [
            "next",
            "type"
          ],
          "properties": {
            "next": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "type": {
              "type": "string",
              "enum": [
                "fork_clone"
              ]
            }
          }
        },
        {
          "description": "If the request is a tuple of (T1, T2, T3, ...), unzip it into multiple responses of T1, T2, T3, ...\n\n# Examples ``` # bevy_impulse::Diagram::from_json_str(r#\" { \"ops\": { \"start\": { \"type\": \"start\", \"next\": \"unzip\" }, \"unzip\": { \"type\": \"unzip\", \"next\": [\"terminate\"] }, \"terminate\": { \"type\": \"terminate\" } } } # \"#)?; # Ok::<_, serde_json::Error>(())",
          "type": "object",
          "required": [
            "next",
            "type"
          ],
          "properties": {
            "next": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "type": {
              "type": "string",
              "enum": [
                "unzip"
              ]
            }
          }
        },
        {
          "description": "If the request is a `Result<_, _>`, branch it to `Ok` and `Err`.\n\n# Examples ``` # bevy_impulse::Diagram::from_json_str(r#\" { \"ops\": { \"start\": { \"type\": \"start\", \"next\": \"fork_result\" }, \"fork_result\": { \"type\": \"fork_result\", \"ok\": \"terminate\", \"err\": \"dispose\" }, \"dispose\": { \"type\": \"dispose\" }, \"terminate\": { \"type\": \"terminate\" } } } # \"#)?; # Ok::<_, serde_json::Error>(())",
          "type": "object",
          "required": [
            "err",
            "ok",
            "type"
          ],
          "properties": {
            "err": {
              "type": "string"
            },
            "ok": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "fork_result"
              ]
            }
          }
        },
        {
          "description": "If the request is a list-like or map-like object, split it into multiple responses. Note that the split output is a tuple of `(KeyOrIndex, Value)`, nodes receiving a split output should have request of that type instead of just the value type.\n\n# Examples ``` # bevy_impulse::Diagram::from_json_str(r#\" { \"ops\": { \"start\": { \"type\": \"start\", \"next\": \"split\" }, \"split\": { \"type\": \"split\", \"index\": [\"terminate\"] }, \"terminate\": { \"type\": \"terminate\" } } } # \"#)?; # Ok::<_, serde_json::Error>(()) ```",
          "type": "object",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "index"
              ],
              "properties": {
                "index": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "key"
              ],
              "properties": {
                "key": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "additionalProperties": false
            }
          ],
          "required": [
            "type"
          ],
          "properties": {
            "remaining": {
              "type": [
                "string",
                "null"
              ]
            },
            "type": {
              "type": "string",
              "enum": [
                "split"
              ]
            }
          }
        },
        {
          "description": "Wait for an item to be emitted from each of the inputs, then combined the oldest of each into an array.\n\n# Examples ``` # bevy_impulse::Diagram::from_json_str(r#\" { \"ops\": { \"start\": { \"type\": \"start\", \"next\": \"split\" }, \"split\": { \"type\": \"split\", \"index\": [\"op1\", \"op2\"] }, \"op1\": { \"type\": \"node\", \"builder\": \"foo\", \"next\": \"join\" }, \"op2\": { \"type\": \"node\", \"builder\": \"bar\", \"next\": \"join\" }, \"join\": { \"type\": \"join\", \"next\": \"terminate\" }, \"terminate\": { \"type\": \"terminate\" } } } # \"#)?; # Ok::<_, serde_json::Error>(()) ```",
          "type": "object",
          "required": [
            "next",
            "type"
          ],
          "properties": {
            "next": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "join"
              ]
            }
          }
        },
        {
          "description": "If the request is serializable, transform it by running it through a [CEL](https://cel.dev/) program. The context includes a \"request\" variable which contains the request.\n\n# Examples ``` # bevy_impulse::Diagram::from_json_str(r#\" { \"ops\": { \"start\": { \"type\": \"start\", \"next\": \"transform\" }, \"transform\": { \"type\": \"transform\", \"cel\": \"request.name\", \"next\": \"terminate\" }, \"terminate\": { \"type\": \"terminate\" } } } # \"#)?; # Ok::<_, serde_json::Error>(()) ```\n\nNote that due to how `serde_json` performs serialization, positive integers are always serialized as unsigned. In CEL, You can't do an operation between unsigned and signed so it is recommended to always perform explicit casts.\n\n# Examples ``` # bevy_impulse::Diagram::from_json_str(r#\" { \"ops\": { \"start\": { \"type\": \"start\", \"next\": \"transform\" }, \"transform\": { \"type\": \"transform\", \"cel\": \"int(request.score) * 3\", \"next\": \"terminate\" }, \"terminate\": { \"type\": \"terminate\" } } } # \"#)?; # Ok::<_, serde_json::Error>(()) ```",
          "type": "object",
          "required": [
            "cel",
            "next",
            "type"
          ],
          "properties": {
            "cel": {
              "type": "string"
            },
            "next": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "transform"
              ]
            }
          }
        },
        {
          "description": "Drop the request, equivalent to a no-op.",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "dispose"
              ]
            }
          }
        }
      ]
    }
  }
}